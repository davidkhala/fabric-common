import Path from 'path';
import IdentityService from './identityService.js';
import {axiosPromise} from '@davidkhala/axios/index.js';
import {consoleLogger} from '@davidkhala/logger/log4.js';

const logger = consoleLogger('CA core');
const FABRIC_CA_HOME = '/etc/hyperledger/fabric-ca-server';
export const container = {
	FABRIC_CA_HOME,
	CONFIG: Path.resolve(FABRIC_CA_HOME, 'fabric-ca-server-config.yaml'),
	tlsCert: Path.resolve(FABRIC_CA_HOME, 'tls-cert.pem')
};

const registerIfNotExist = async (caService, admin, {enrollmentID, enrollmentSecret, affiliation, role, attrs}) => {

	const identityService = new IdentityService(caService, admin);

	const secret = await identityService.createIfNotExist({
		enrollmentID, enrollmentSecret, affiliation, role, attrs
	});
	let status;
	if (!enrollmentSecret) {
		logger.info({affiliation}, 'new enrollmentSecret generated by ca service');
		enrollmentSecret = secret;
		status = 'generated';
	} else if (!secret) {
		status = 'existed';
	} else {
		status = 'assigned';
	}
	return {enrollmentID, enrollmentSecret, status};
};
// TODO e2e test
export const intermediateCA = {
	register: async (caService, admin, {enrollmentID, enrollmentSecret, affiliation}) => {
		return await registerIfNotExist(caService, admin, {
			enrollmentID, enrollmentSecret,
			affiliation, role: 'user',
			attrs: [{name: 'hf.IntermediateCA', value: 'true'}]
		});
	}
};

/**
 *
 * @param {string} caUrl
 * @param [options]
 * @returns {Promise<{CAName, CAChain, IssuerPublicKey,IssuerRevocationPublicKey,Version}>}
 */
export async function ping(caUrl, options = {rejectUnauthorized: false}) {
	const {result} = await axiosPromise({url: `${caUrl}/cainfo`, method: 'GET'}, options);
	return result;
}

export {registerIfNotExist as register};

